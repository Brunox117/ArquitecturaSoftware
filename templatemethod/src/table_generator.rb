# Template Method Pattern
# Date: 22-Aug-2022
# Authors:
#          A01748931 Bruno Omar Jimenez Mancilla
#          A01748559 Roberto Castro Barrios
# File name: table_generator.rb
#The source code containde in this file demonstrates how to implement the <em> Template method pattern</em>.
#The superclass that will be used as a 'skeleton'
class TableGenerator
  #Initialize a new table with the values passed
  def initialize(header, data)
    @header = header
    @data = data
  end
  #Creates the table with a header and rows generated by the data passed in the initializer
  def generate
    generate_header_row + (@data.map {|x| generate_row(x)}).join
  end
  #Creates the header of the table using the data defined in the initializer
  def generate_header_row
    (@header.map {|x| generate_header_item(x)}).join
  end
  #Returns the item passed as a parameter
  def generate_item(item)
    item
  end
  #Generates the rows of the table with the data given to the initializer 
  def generate_row(row)
    (row.map {|x| generate_item(x)}).join
  end
  #Returns the header item passed as a parameter
  def generate_header_item(item)
    item
  end

end
#A class that inherits from TableGenerator and generates a table using comma separated values.
class CSVTableGenerator < TableGenerator
  #Generates the rows of the table using ',' to join the data of each row 
  def generate_row(row)
    "#{(row.map {|x| generate_item(x)}).join(',')}\n"
  end
  #Generates the header of the row using the header passed in the initializer with the specific format of csv
  def generate_header_row
    generate_row(@header)
  end

end
#A class that inherits from TableGenerator and generates a table using html as the text format.
class HTMLTableGenerator < TableGenerator
  #Generates the table with a header and the rows enclosing them in html tags
  def generate
  "<table>\n" + generate_header_row + (@data.map {|x| generate_row(x)}).join + "</table>\n"
  end
  #Creates the header using the header value passed at the initializer enclosing it with html tags
  def generate_header_row
  "<tr><th>#{(@header.map {|x| generate_item(x)}).join('</th><th>')}</th></tr>\n"
  end
  #Creates each row using the data passed with the initializer enclosing it in html tags and using '</td><td>' to join the data
  def generate_row(row)
  "<tr><td>#{(row.map {|x| generate_item(x)}).join('</td><td>')}</td></tr>\n"
  end
end
#A class that inherits from TableGenerator and generates a table using AsciiDoc as the text format.
class AsciiDocTableGenerator < TableGenerator
  #Creates the table with its header and its rows using a pipe and equal signs to enclose the data
  def generate
  "[options=\"header\"]\n" + "|==========\n" + generate_header_row + (@data.map {|x| generate_row(x)}).join + "|==========\n"
  end
  #Creates the header row with the data passed to the initializer
  def generate_header_row
    generate_row(@header)
  end
  #Creates each row of the table with the data passed to the initializer, add a pipe at the start of each row and also uses it to join the data
  def generate_row(row)
  "|#{(row.map {|x| generate_item(x)}).join('|')}\n"
  end
end
