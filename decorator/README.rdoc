= Decorator Pattern

This documentation was developed as part of a programming activity for the <em>Software Design and Architecture</em> course (_Tc3049_), at the Tecnológico de Monterrey, Campus Estado de México.

== Authors

* *A01748931* <em>Bruno Omar Jimenez Mancilla</em>
* *A01748559* <em>Roberto Castro Barrios</em>

== Overview

The <b>Decorator Pattern </b> is a structural pattern that allows adding new behaviors to objects dynamically by placing them inside special wrapper objects, called decorators.

The UML diagram for this programming activity is as follows:

rdoc-image:img/decoratorpattern_uml.png

To test the program, inside the +src+ folder type the following instruction at the command line:

    ruby -I . -w coffe_test.rb

== References
- \A. Ortiz. <em>ArielOrtiz.info</em> {https://arielortiz.info/apps/s202213/tc3049/programming_decorator/}[https://arielortiz.info/apps/s202213/tc3049/programming_decorator/] Accesed October 01, 2022.

- Refactoring guru. <em>Decorator in Ruby</em> {https://refactoring.guru/design-patterns/decorator/ruby/example}[https://refactoring.guru/design-patterns/decorator/ruby/example] Accessed October 01, 2022.
